//generated by https://www.planttext.com/

@startuml

title Class diagram for example of design pattern Observer


interface Observable {
}

interface Observer {
    + oid update(Observable observable, Object data)

    +void updateWithNoData(Observable observable);

    +int getId();
}

interface NumberGenerator extends Observable {

    +void startGenerate();

    +void stopGenerate();

    +void registerEvenNumberObserver(Observer evenNumObserver);

    +void registerOddNumberObserver(Observer oddNumObserver);

    +void register3DivisibleNumberObserver(Observer oddNumObserver);

    +void unregisterObserver(int observerID);
}

class EvenNumberObserverImpl extends ObserverCommon {
}

abstract class ObserverCommon implements Observer {

    # final CustomizedBufferedWriter fw;

    # final int id;

    # static int currentId;
}

class OddNumberObserverImpl extends ObserverCommon {
}

class Number3DivisibleNumberObserverImpl extends ObserverCommon {
}

class NumberGeneratorImpl implements NumberGenerator {
    -CustomizedBufferedWriter fw;
    -List<Observer> observersForOddNumberGenerated;
    -List<Observer> observersForEvenNumberGenerated;
    -List<Observer> observersFor3DivisibleNumberGenerated;

    -Observable thisNumberGenerator;
    -Observer numberGeneratedObserver;
    -Thread threadForNumGenerator;


}

class NumGenerator implements Runnable, Observable {
}

class CustomObserver extends ObserverCommon {
}


NumberGeneratorImpl +-- NumGenerator
NumberGeneratorImpl +-- CustomObserver

NumberGeneratorImpl *-- OddNumberObserverImpl
NumberGeneratorImpl *-- EvenNumberObserverImpl
NumberGeneratorImpl *-- Number3DivisibleNumberObserverImpl


@enduml